include(${ARCBUILD_DIR}/core.cmake)
include(${ARCBUILD_DIR}/arcsoft_sdk.cmake)

function(arcbuild_guess_mpbase_version var_name)
  arcbuild_get_platform_code(platform)
  arcbuild_get_arch_code(arch)
  list(REMOVE_AT platform 0)
  list(REMOVE_AT arch 0)

  if(platform STREQUAL "android")
    if(arch MATCHES "^armv7")
      set(version "android_armv7a")
    elseif(arch MATCHES "^arm64")
      set(version "android_arm_common_x64")
    elseif(arch MATCHES "^arm")
      set(version "android_arm_common")
    elseif(arch STREQUAL "x64")
      set(version "android_x86_common_x64")
    elseif(arch STREQUAL "x86")
      set(version "android_x86_common")
    endif()
  elseif(platform MATCHES "^mac")
    set(version "mac")
  elseif(platform MATCHES "^ios")
    if(IOS_BITCODE)
      set(version "ios_all_common")
    else()
      set(version "ios_all_common")
    endif()
  elseif(platform STREQUAL "vc6")
    if(arch STREQUAL "x86")
      set(version "vc6_win32_x86")
    endif()
  elseif(platform MATCHES "(vs2005)")
    if(arch STREQUAL "x64")
      set(version "vs2005_x64")
    endif()
  elseif(platform MATCHES "(vs2010|vs2012|vs2013|vs2015)")
    if(arch STREQUAL "x86")
      set(version "vs2010_win32_x86")
    elseif(arch STREQUAL "x64")
      set(version "vs2010_x64")
    endif()
  elseif(platform STREQUAL "linux")
    if(arch STREQUAL "x64")
      set(version "linux_64bit")
    elseif(arch STREQUAL "x86")
      set(version "linux_32bit")
    endif()
  elseif(platform STREQUAL "tizen")
    if(arch MATCHES "^arm")
      set(version "tizen_arm_common")
    elseif(arch STREQUAL "x86")
      set(version "tizen_i386_common")
    endif()
  endif()
  if(version)
    set(version "0.1.0.4/${version}")
    set(${var_name} ${version} PARENT_SCOPE)
  endif()
endfunction()

function(arcbuild_get_mpbase_root var_name)
  set(target_dir "${CMAKE_BINARY_DIR}")
  set(target_path "${target_dir}/mpbase_bin.zip")
  set(url "http://172.17.10.213/aisg/mpbase_bin/repository/archive.zip")
  if(NOT EXISTS "${target_path}")
    arcbuild_echo("Downloading ${url} ...")
    file(DOWNLOAD "${url}" "${target_path}")
    arcbuild_echo("Downloading ${url} [DONE]")
    execute_process(COMMAND cmake -E tar xf "${target_path}" -C "${target_dir}" WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
  endif()
  set(${var_name} "${target_dir}/mpbase_bin.git" PARENT_SCOPE)
endfunction()

function(arcbuild_get_mpbase_dir var_name)
  if(NOT MPBASE_ROOT)
    arcbuild_get_mpbase_root(MPBASE_ROOT)
  endif()
  if(NOT MPBASE_VERSION)
    arcbuild_guess_mpbase_version(MPBASE_VERSION)
  endif()
  if(NOT MPBASE_VERSION)
    arcbuild_error("No appropriate prebuilt version of mpbase is found!")
  endif()
  set(${var_name} "${MPBASE_ROOT}/${MPBASE_VERSION}" PARENT_SCOPE)
endfunction()

function(arcbuild_include_mpbase)
  # Find paths of library and include directory
  if(NOT MPBASE_DIR)
    arcbuild_get_mpbase_dir(MPBASE_DIR)
  endif()
  if(ARCBUILD_TYPE)
    set(preferred_build_type ${ARCBUILD_TYPE})
  else()
    set(preferred_build_type SHARED)
  endif()
  set(static_names mpbase.a libmpbase.a mpbase.lib)
  set(shared_names mpbase.so libmpbase.so mpbase.dll)
  if(preferred_build_type STREQUAL "SHARED")
    set(searched_names "${shared_names};${static_names}")
  else()
    set(searched_names "${static_names};${shared_names}")
  endif()
  arcbuild_find_file(MPBASE_LIBRARY NAMES ${searched_names} PATHS "${MPBASE_DIR}/platform/lib" NO_DEFAULT_PATH)
  arcbuild_find_path(MPBASE_INCLUDE_DIR NAMES ammem.h PATHS "${MPBASE_DIR}/platform/inc" NO_DEFAULT_PATH)
  if(NOT MPBASE_LIBRARY OR NOT MPBASE_INCLUDE_DIR)
    arcbuild_error("Cannot find mpbase library in ${MPBASE_DIR}")
  endif()
  arcbuild_echo("Found mpbase in ${MPBASE_DIR}")
  arcbuild_echo("- Include ${MPBASE_DIR}")
  set(MPBASE "${MPBASE_DIR}" PARENT_SCOPE)

  # Add imported target
  if(MPBASE_LIBRARY MATCHES "\\.(a|lib)$")
    set(MPBASE_TYPE SHARED)
  else()
    set(MPBASE_TYPE STATIC)
  endif()
  add_library(mpbase ${MPBASE_TYPE} IMPORTED)
  set_target_properties(mpbase PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${MPBASE_INCLUDE_DIR}"
    IMPORTED_IMPLIB "${MPBASE_LIBRARY}"
    IMPORTED_LOCATION "${MPBASE_LIBRARY}"
  )
endfunction()

arcbuild_include_mpbase()
